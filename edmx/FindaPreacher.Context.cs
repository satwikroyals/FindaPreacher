//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FindaPreacher_1_.edmx
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class FindaPreacherEntities2 : DbContext
    {
        public FindaPreacherEntities2()
            : base("name=FindaPreacherEntities2")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<DenominationType> DenominationTypes { get; set; }
        public virtual DbSet<District> Districts { get; set; }
        public virtual DbSet<EventComment> EventComments { get; set; }
        public virtual DbSet<EventEnquiry> EventEnquiries { get; set; }
        public virtual DbSet<EventHelpService> EventHelpServices { get; set; }
        public virtual DbSet<EventImage> EventImages { get; set; }
        public virtual DbSet<Event> Events { get; set; }
        public virtual DbSet<EventVideo> EventVideos { get; set; }
        public virtual DbSet<FavouriteEvent> FavouriteEvents { get; set; }
        public virtual DbSet<FavouritePreacher> FavouritePreachers { get; set; }
        public virtual DbSet<HelpServiceType> HelpServiceTypes { get; set; }
        public virtual DbSet<MinistryType> MinistryTypes { get; set; }
        public virtual DbSet<News> News { get; set; }
        public virtual DbSet<State> States { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UserType> UserTypes { get; set; }
    
        [DbFunction("FindaPreacherEntities2", "Split")]
        public virtual IQueryable<Split_Result> Split(string @string, string delimiter)
        {
            var stringParameter = @string != null ?
                new ObjectParameter("String", @string) :
                new ObjectParameter("String", typeof(string));
    
            var delimiterParameter = delimiter != null ?
                new ObjectParameter("Delimiter", delimiter) :
                new ObjectParameter("Delimiter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Split_Result>("[FindaPreacherEntities2].[Split](@String, @Delimiter)", stringParameter, delimiterParameter);
        }
    
        [DbFunction("FindaPreacherEntities2", "SplitMulti")]
        public virtual IQueryable<SplitMulti_Result> SplitMulti(string lIST, string dELIMITER)
        {
            var lISTParameter = lIST != null ?
                new ObjectParameter("LIST", lIST) :
                new ObjectParameter("LIST", typeof(string));
    
            var dELIMITERParameter = dELIMITER != null ?
                new ObjectParameter("DELIMITER", dELIMITER) :
                new ObjectParameter("DELIMITER", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<SplitMulti_Result>("[FindaPreacherEntities2].[SplitMulti](@LIST, @DELIMITER)", lISTParameter, dELIMITERParameter);
        }
    
        public virtual int AddEvent(Nullable<long> eventID, Nullable<long> userID, string title, string description, Nullable<int> ministryTypeID, string helpServiceTypeIDs, string location, string latitude, string longitude, string startDate, string endDate, string contactPerson, string contactPhone, string contactEmailID, Nullable<int> isBookingNeeded, string ticketPrice, Nullable<long> ticketsAvailable, Nullable<long> ticketsPerPerson, Nullable<long> ticketsBooked, Nullable<int> status, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> modifiedDate)
        {
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(long));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var ministryTypeIDParameter = ministryTypeID.HasValue ?
                new ObjectParameter("MinistryTypeID", ministryTypeID) :
                new ObjectParameter("MinistryTypeID", typeof(int));
    
            var helpServiceTypeIDsParameter = helpServiceTypeIDs != null ?
                new ObjectParameter("HelpServiceTypeIDs", helpServiceTypeIDs) :
                new ObjectParameter("HelpServiceTypeIDs", typeof(string));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var latitudeParameter = latitude != null ?
                new ObjectParameter("Latitude", latitude) :
                new ObjectParameter("Latitude", typeof(string));
    
            var longitudeParameter = longitude != null ?
                new ObjectParameter("Longitude", longitude) :
                new ObjectParameter("Longitude", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var contactPersonParameter = contactPerson != null ?
                new ObjectParameter("ContactPerson", contactPerson) :
                new ObjectParameter("ContactPerson", typeof(string));
    
            var contactPhoneParameter = contactPhone != null ?
                new ObjectParameter("ContactPhone", contactPhone) :
                new ObjectParameter("ContactPhone", typeof(string));
    
            var contactEmailIDParameter = contactEmailID != null ?
                new ObjectParameter("ContactEmailID", contactEmailID) :
                new ObjectParameter("ContactEmailID", typeof(string));
    
            var isBookingNeededParameter = isBookingNeeded.HasValue ?
                new ObjectParameter("IsBookingNeeded", isBookingNeeded) :
                new ObjectParameter("IsBookingNeeded", typeof(int));
    
            var ticketPriceParameter = ticketPrice != null ?
                new ObjectParameter("TicketPrice", ticketPrice) :
                new ObjectParameter("TicketPrice", typeof(string));
    
            var ticketsAvailableParameter = ticketsAvailable.HasValue ?
                new ObjectParameter("TicketsAvailable", ticketsAvailable) :
                new ObjectParameter("TicketsAvailable", typeof(long));
    
            var ticketsPerPersonParameter = ticketsPerPerson.HasValue ?
                new ObjectParameter("TicketsPerPerson", ticketsPerPerson) :
                new ObjectParameter("TicketsPerPerson", typeof(long));
    
            var ticketsBookedParameter = ticketsBooked.HasValue ?
                new ObjectParameter("TicketsBooked", ticketsBooked) :
                new ObjectParameter("TicketsBooked", typeof(long));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddEvent", eventIDParameter, userIDParameter, titleParameter, descriptionParameter, ministryTypeIDParameter, helpServiceTypeIDsParameter, locationParameter, latitudeParameter, longitudeParameter, startDateParameter, endDateParameter, contactPersonParameter, contactPhoneParameter, contactEmailIDParameter, isBookingNeededParameter, ticketPriceParameter, ticketsAvailableParameter, ticketsPerPersonParameter, ticketsBookedParameter, statusParameter, createdDateParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<AddEventEnquiry_Result> AddEventEnquiry(Nullable<long> eventID, Nullable<long> userID, string helpServiceTypeIDs, string message)
        {
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(long));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            var helpServiceTypeIDsParameter = helpServiceTypeIDs != null ?
                new ObjectParameter("HelpServiceTypeIDs", helpServiceTypeIDs) :
                new ObjectParameter("HelpServiceTypeIDs", typeof(string));
    
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AddEventEnquiry_Result>("AddEventEnquiry", eventIDParameter, userIDParameter, helpServiceTypeIDsParameter, messageParameter);
        }
    
        public virtual ObjectResult<AddRemoveFavouriteEvent_Result> AddRemoveFavouriteEvent(Nullable<long> eventID, Nullable<long> userID)
        {
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(long));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AddRemoveFavouriteEvent_Result>("AddRemoveFavouriteEvent", eventIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<AddRemoveFavouritePreacher_Result> AddRemoveFavouritePreacher(Nullable<long> preacherID, Nullable<long> userID)
        {
            var preacherIDParameter = preacherID.HasValue ?
                new ObjectParameter("PreacherID", preacherID) :
                new ObjectParameter("PreacherID", typeof(long));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AddRemoveFavouritePreacher_Result>("AddRemoveFavouritePreacher", preacherIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<AddUpdateNews_Result> AddUpdateNews(Nullable<long> newsID, string title, string description, string image, string location, string latitude, string longitude, Nullable<int> countryID, Nullable<int> stateID, Nullable<int> districtID, string city, Nullable<int> displayOrder, Nullable<int> status, Nullable<int> createdByUserType, Nullable<long> createdBy)
        {
            var newsIDParameter = newsID.HasValue ?
                new ObjectParameter("NewsID", newsID) :
                new ObjectParameter("NewsID", typeof(long));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var imageParameter = image != null ?
                new ObjectParameter("Image", image) :
                new ObjectParameter("Image", typeof(string));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var latitudeParameter = latitude != null ?
                new ObjectParameter("Latitude", latitude) :
                new ObjectParameter("Latitude", typeof(string));
    
            var longitudeParameter = longitude != null ?
                new ObjectParameter("Longitude", longitude) :
                new ObjectParameter("Longitude", typeof(string));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var displayOrderParameter = displayOrder.HasValue ?
                new ObjectParameter("DisplayOrder", displayOrder) :
                new ObjectParameter("DisplayOrder", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var createdByUserTypeParameter = createdByUserType.HasValue ?
                new ObjectParameter("CreatedByUserType", createdByUserType) :
                new ObjectParameter("CreatedByUserType", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AddUpdateNews_Result>("AddUpdateNews", newsIDParameter, titleParameter, descriptionParameter, imageParameter, locationParameter, latitudeParameter, longitudeParameter, countryIDParameter, stateIDParameter, districtIDParameter, cityParameter, displayOrderParameter, statusParameter, createdByUserTypeParameter, createdByParameter);
        }
    
        public virtual ObjectResult<DdlGetDenominationTypes_Result> DdlGetDenominationTypes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DdlGetDenominationTypes_Result>("DdlGetDenominationTypes");
        }
    
        public virtual ObjectResult<DdlGetEventHelpServiceTypes_Result> DdlGetEventHelpServiceTypes(Nullable<long> eventID)
        {
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DdlGetEventHelpServiceTypes_Result>("DdlGetEventHelpServiceTypes", eventIDParameter);
        }
    
        public virtual ObjectResult<DdlGetHelpServiceTypes_Result> DdlGetHelpServiceTypes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DdlGetHelpServiceTypes_Result>("DdlGetHelpServiceTypes");
        }
    
        public virtual ObjectResult<DdlGetMinistryTypes_Result> DdlGetMinistryTypes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DdlGetMinistryTypes_Result>("DdlGetMinistryTypes");
        }
    
        public virtual ObjectResult<DeleteEvent_Result> DeleteEvent(Nullable<long> eventID)
        {
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DeleteEvent_Result>("DeleteEvent", eventIDParameter);
        }
    
        public virtual ObjectResult<DeleteEventComment_Result> DeleteEventComment(Nullable<long> commentID)
        {
            var commentIDParameter = commentID.HasValue ?
                new ObjectParameter("CommentID", commentID) :
                new ObjectParameter("CommentID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DeleteEventComment_Result>("DeleteEventComment", commentIDParameter);
        }
    
        public virtual ObjectResult<DeleteEventEnquiry_Result> DeleteEventEnquiry(Nullable<long> enquiryID)
        {
            var enquiryIDParameter = enquiryID.HasValue ?
                new ObjectParameter("EnquiryID", enquiryID) :
                new ObjectParameter("EnquiryID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DeleteEventEnquiry_Result>("DeleteEventEnquiry", enquiryIDParameter);
        }
    
        public virtual ObjectResult<DeleteNews_Result> DeleteNews(Nullable<long> newsID)
        {
            var newsIDParameter = newsID.HasValue ?
                new ObjectParameter("NewsID", newsID) :
                new ObjectParameter("NewsID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DeleteNews_Result>("DeleteNews", newsIDParameter);
        }
    
        public virtual ObjectResult<EventDetails_Result> EventDetails(Nullable<int> eventID)
        {
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EventDetails_Result>("EventDetails", eventIDParameter);
        }
    
        public virtual int GetAdminNewsList(Nullable<int> countryID, Nullable<long> stateID, Nullable<long> districtID, string city, string location, string fromDate, string toDate, Nullable<int> pageSize, Nullable<int> pageIndex, string searchstr, Nullable<int> sortBy)
        {
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(long));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(long));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var searchstrParameter = searchstr != null ?
                new ObjectParameter("Searchstr", searchstr) :
                new ObjectParameter("Searchstr", typeof(string));
    
            var sortByParameter = sortBy.HasValue ?
                new ObjectParameter("SortBy", sortBy) :
                new ObjectParameter("SortBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAdminNewsList", countryIDParameter, stateIDParameter, districtIDParameter, cityParameter, locationParameter, fromDateParameter, toDateParameter, pageSizeParameter, pageIndexParameter, searchstrParameter, sortByParameter);
        }
    
        public virtual ObjectResult<GetDdlCountries_Result> GetDdlCountries()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDdlCountries_Result>("GetDdlCountries");
        }
    
        public virtual ObjectResult<GetEventComments_Result> GetEventComments(Nullable<long> eventID, Nullable<long> userID)
        {
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(long));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEventComments_Result>("GetEventComments", eventIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<GetEventDetails_Result> GetEventDetails(Nullable<long> userID, Nullable<long> eventID, Nullable<decimal> latitude, Nullable<decimal> longitude)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(long));
    
            var latitudeParameter = latitude.HasValue ?
                new ObjectParameter("Latitude", latitude) :
                new ObjectParameter("Latitude", typeof(decimal));
    
            var longitudeParameter = longitude.HasValue ?
                new ObjectParameter("Longitude", longitude) :
                new ObjectParameter("Longitude", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEventDetails_Result>("GetEventDetails", userIDParameter, eventIDParameter, latitudeParameter, longitudeParameter);
        }
    
        public virtual ObjectResult<GetEventEnquiries_Result> GetEventEnquiries(Nullable<long> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEventEnquiries_Result>("GetEventEnquiries", userIDParameter);
        }
    
        public virtual ObjectResult<GetEventImages_Result> GetEventImages(Nullable<long> eventID)
        {
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEventImages_Result>("GetEventImages", eventIDParameter);
        }
    
        public virtual ObjectResult<GetEventImagesByEventIDs_Result> GetEventImagesByEventIDs(string eventIDs)
        {
            var eventIDsParameter = eventIDs != null ?
                new ObjectParameter("EventIDs", eventIDs) :
                new ObjectParameter("EventIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEventImagesByEventIDs_Result>("GetEventImagesByEventIDs", eventIDsParameter);
        }
    
        public virtual ObjectResult<GetEvents_Result> GetEvents(Nullable<long> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEvents_Result>("GetEvents", userIDParameter);
        }
    
        public virtual ObjectResult<GetEventsByCreatedUserID_Result> GetEventsByCreatedUserID(Nullable<long> createdUserID, Nullable<long> userID)
        {
            var createdUserIDParameter = createdUserID.HasValue ?
                new ObjectParameter("CreatedUserID", createdUserID) :
                new ObjectParameter("CreatedUserID", typeof(long));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEventsByCreatedUserID_Result>("GetEventsByCreatedUserID", createdUserIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<GetEventVideos_Result> GetEventVideos(Nullable<long> eventID)
        {
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEventVideos_Result>("GetEventVideos", eventIDParameter);
        }
    
        public virtual ObjectResult<GetEventVideosByEventIDs_Result> GetEventVideosByEventIDs(string eventIDs)
        {
            var eventIDsParameter = eventIDs != null ?
                new ObjectParameter("EventIDs", eventIDs) :
                new ObjectParameter("EventIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEventVideosByEventIDs_Result>("GetEventVideosByEventIDs", eventIDsParameter);
        }
    
        public virtual ObjectResult<GetFavouriteEvents_Result> GetFavouriteEvents(Nullable<long> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetFavouriteEvents_Result>("GetFavouriteEvents", userIDParameter);
        }
    
        public virtual ObjectResult<GetFavouritePreachers_Result> GetFavouritePreachers(Nullable<long> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetFavouritePreachers_Result>("GetFavouritePreachers", userIDParameter);
        }
    
        public virtual ObjectResult<GetNearByEvents_Result> GetNearByEvents(Nullable<decimal> latitude, Nullable<decimal> longitude, Nullable<int> radius)
        {
            var latitudeParameter = latitude.HasValue ?
                new ObjectParameter("Latitude", latitude) :
                new ObjectParameter("Latitude", typeof(decimal));
    
            var longitudeParameter = longitude.HasValue ?
                new ObjectParameter("Longitude", longitude) :
                new ObjectParameter("Longitude", typeof(decimal));
    
            var radiusParameter = radius.HasValue ?
                new ObjectParameter("Radius", radius) :
                new ObjectParameter("Radius", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetNearByEvents_Result>("GetNearByEvents", latitudeParameter, longitudeParameter, radiusParameter);
        }
    
        public virtual ObjectResult<GetNewsDetails_Result> GetNewsDetails(Nullable<long> newsID)
        {
            var newsIDParameter = newsID.HasValue ?
                new ObjectParameter("NewsID", newsID) :
                new ObjectParameter("NewsID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetNewsDetails_Result>("GetNewsDetails", newsIDParameter);
        }
    
        public virtual int GetNewsList(Nullable<int> countryID, Nullable<long> stateID, Nullable<long> districtID, Nullable<int> pageSize, Nullable<int> pageIndex, string searchstr, Nullable<int> sortBy)
        {
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(long));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(long));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var searchstrParameter = searchstr != null ?
                new ObjectParameter("Searchstr", searchstr) :
                new ObjectParameter("Searchstr", typeof(string));
    
            var sortByParameter = sortBy.HasValue ?
                new ObjectParameter("SortBy", sortBy) :
                new ObjectParameter("SortBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetNewsList", countryIDParameter, stateIDParameter, districtIDParameter, pageSizeParameter, pageIndexParameter, searchstrParameter, sortByParameter);
        }
    
        public virtual ObjectResult<GetUserDetailsById_Result> GetUserDetailsById(Nullable<long> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserDetailsById_Result>("GetUserDetailsById", userIDParameter);
        }
    
        public virtual ObjectResult<PostEventComment_Result> PostEventComment(Nullable<long> eventID, Nullable<long> userID, string comment)
        {
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(long));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PostEventComment_Result>("PostEventComment", eventIDParameter, userIDParameter, commentParameter);
        }
    
        public virtual ObjectResult<RegisterUser_Result> RegisterUser(string firstName, string lastName, string email, string mobile, string pin, Nullable<int> countryID, string address, string longitude, string latitude, string city, string postCode, Nullable<int> userTypeID, Nullable<int> denominationTypeId, string qualification, string details, string organisationName)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var pinParameter = pin != null ?
                new ObjectParameter("Pin", pin) :
                new ObjectParameter("Pin", typeof(string));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var longitudeParameter = longitude != null ?
                new ObjectParameter("Longitude", longitude) :
                new ObjectParameter("Longitude", typeof(string));
    
            var latitudeParameter = latitude != null ?
                new ObjectParameter("Latitude", latitude) :
                new ObjectParameter("Latitude", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var postCodeParameter = postCode != null ?
                new ObjectParameter("PostCode", postCode) :
                new ObjectParameter("PostCode", typeof(string));
    
            var userTypeIDParameter = userTypeID.HasValue ?
                new ObjectParameter("UserTypeID", userTypeID) :
                new ObjectParameter("UserTypeID", typeof(int));
    
            var denominationTypeIdParameter = denominationTypeId.HasValue ?
                new ObjectParameter("DenominationTypeId", denominationTypeId) :
                new ObjectParameter("DenominationTypeId", typeof(int));
    
            var qualificationParameter = qualification != null ?
                new ObjectParameter("Qualification", qualification) :
                new ObjectParameter("Qualification", typeof(string));
    
            var detailsParameter = details != null ?
                new ObjectParameter("Details", details) :
                new ObjectParameter("Details", typeof(string));
    
            var organisationNameParameter = organisationName != null ?
                new ObjectParameter("OrganisationName", organisationName) :
                new ObjectParameter("OrganisationName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RegisterUser_Result>("RegisterUser", firstNameParameter, lastNameParameter, emailParameter, mobileParameter, pinParameter, countryIDParameter, addressParameter, longitudeParameter, latitudeParameter, cityParameter, postCodeParameter, userTypeIDParameter, denominationTypeIdParameter, qualificationParameter, detailsParameter, organisationNameParameter);
        }
    
        public virtual ObjectResult<UserLogin_Result> UserLogin(string userName, string pin)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var pinParameter = pin != null ?
                new ObjectParameter("Pin", pin) :
                new ObjectParameter("Pin", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserLogin_Result>("UserLogin", userNameParameter, pinParameter);
        }
    
        public virtual int USP_GetPaggingData(Nullable<int> pageSize, Nullable<int> pageIndex, ObjectParameter query)
        {
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_GetPaggingData", pageSizeParameter, pageIndexParameter, query);
        }
    }
}
